#!/usr/bin/env ruby

require 'configru'
require 'cinch'
require 'cinch/plugins/basic_ctcp'
require 'cinch/plugins/identify'

require 'eleventhbot'

%w[spell].map {|r| require("eleventhbot/#{r}") }
plugins = [EleventhBot::Spell]

Configru.load('eleventhbot.yml') do
  option_group :irc do
    option_required :server, String
    option :port, Fixnum, 6667

    option :nick, String, 'bot11'
    option :nickserv, String, ''
    option_array :channels, String

    option :prefix, String, '!'
  end

  plugins.each do |plugin|
    next unless plugin.configru_group
    option_group plugin.configru_group do
      instance_eval &plugin.configru_block
    end
  end
end

bot = Cinch::Bot.new do
  configure do |c|
    c.nick = Configru.irc.nick
    c.server = Configru.irc.server
    c.port = Configru.irc.port
    c.channels = Configru.irc.channels
    c.plugins.prefix = /^#{Regexp.escape(Configru.irc.prefix)}/ # TODO: Respond to nick

    c.plugins.plugins = [Cinch::Plugins::BasicCTCP, Cinch::Plugins::Identify]

    c.plugins.options[Cinch::Plugins::BasicCTCP][:commands] = [:version, :time, :ping]

    unless Configru.irc.nickserv.empty?
      c.plugins.options[Cinch::Plugins::Identify] = {
        :type => :nickserv,
        :username => Configru.irc.nick,
        :password => Configru.irc.nickserv
      }
    end

    plugins.each do |plugin|
      c.plugins.plugins << plugin
      c.plugins.options[plugin] = Configru[plugin.configru_group.to_s]
    end
  end

  on :message, '`meep' do |m|
    m.reply('meep')
  end
end

bot.start
